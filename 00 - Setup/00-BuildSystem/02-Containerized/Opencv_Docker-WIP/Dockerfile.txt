# Use Ubuntu 20.04 as the base image
ARG UBUNTU="20.04"
FROM ubuntu:${UBUNTU}

ARG OPENCV="4.5.4"

ENV DEBIAN_FRONTEND=noninteractive

# Update and install dependencies
RUN apt update && apt install -y --no-install-recommends \
    # Build tools for compiling C/C++ code
    build-essential pkg-config \
    cmake git gcc g++ ninja-build \
    # Debugger for debugging code
    gdb \
    # Utilities for downloading and extracting files
    wget unzip yasm \
    # Package manager for installing software without a package manager
    checkinstall \
    ### OpenCV Dependencies ###
    # Development libraries for IEEE 1394 cameras (DC-1394)
    libdc1394-22 libdc1394-22-dev \
    # Linear algebra library optimized for performance
    libatlas-base-dev \
    # Fortran compiler (for numerical computations)
    gfortran \
    # Flann development libraries (for efficient nearest neighbor search)
    libflann-dev \
    # Thread building blocks library (for concurrent programming)
    libtbb2 libtbb-dev \
    # JPEG image compression and decompression library
    libjpeg-dev \
    # PNG image compression and decompression library
    libpng-dev \
    # TIFF image compression and decompression library
    libtiff-dev libtiff5-dev \
    # OpenGL Extension Wrangler (GLEW) development libraries
    libglew-dev \
    # Compression library (zlib)
    zlib1g-dev \
    # Geospatial data abstraction library (GDAL) development libraries
    libgdal-dev \
    # Flags and gflags development libraries (for command-line argument parsing)
    libgflags-dev libgoogle-glog-dev \
    # Protocol Buffers compiler and development libraries
    libprotobuf-dev protobuf-compiler \
    # Video encoding and decoding library
    ffmpeg \
    # AVFoundation development libraries for video encoding and decoding
    libavutil-dev libavcodec-dev libavformat-dev libavutil-dev libswscale-dev libavresample-dev \
    # Leptonica image processing library development libraries
    libleptonica-dev \
    # Tesseract OCR engine development libraries
    libtesseract-dev \
    # GTK+ GUI toolkit development libraries (for GUI applications)
    libgtk-3-dev libgtk2.0-dev \
    # VTK (Visualization Toolkit) development libraries for 3D visualization
    libvtk6-dev \
    # Linear algebra library (LAPACK) development libraries
    liblapack-dev \
    # Development libraries for v4l (video4linux)
    libv4l-dev \
    doxygen \
    # Eigen
    libeigen3-dev \
    # Python
    python-dev python-numpy python3-dev python3-numpy \
    # HDF5 serial library development libraries
    libhdf5-serial-dev

# Build OpenCV
WORKDIR /tmp
RUN wget https://github.com/opencv/opencv/archive/refs/tags/${OPENCV}.zip && unzip ${OPENCV}.zip && rm ${OPENCV}.zip
RUN wget https://github.com/opencv/opencv_contrib/archive/${OPENCV}.zip && unzip ${OPENCV}.zip && rm ${OPENCV}.zip

# Configure and build OpenCV
RUN mkdir opencv-${OPENCV}/build && cd opencv-${OPENCV}/build && \
    cmake -G Ninja \
        -DOPENCV_EXTRA_MODULES_PATH="/tmp/opencv_contrib-${OPENCV}/modules" \
        # Disable CUDA support
        -DWITH_CUDA=OFF \
        # Enable fast math optimizations
        -DENABLE_FAST_MATH=ON \
        # Allow non-free OpenCV modules
        -DOPENCV_ENABLE_NONFREE=ON \
        # Disable GStreamer
        -DWITH_GSTREAMER=OFF \
        # Build configuration
        -DCMAKE_BUILD_TYPE=RELEASE \
        # Install path
        -DCMAKE_INSTALL_PREFIX=/usr/local \
        # Disable tests and examples
        -DBUILD_TESTS=OFF \
        -DBUILD_PERF_TESTS=OFF \
        -DBUILD_EXAMPLES=OFF \
        # Build OpenCV applications
        -DBUILD_opencv_apps=ON \
        # Generate pkg-config
        -DOPENCV_GENERATE_PKGCONFIG=ON \
        .. && \
    ninja && \
    ninja install && \
    ldconfig

# Cleanup
RUN rm -rf /tmp/* && rm -rf /var/lib/apt/lists/*

# Test OpenCV installation
RUN pkg-config --modversion opencv4

# Test OpenCV Python installation
RUN python3 -c "import cv2; print(cv2.__version__)"