#https://github.com/lanzani/opencv-cuda-docker
#https://catalog.ngc.nvidia.com/collections
ARG CUDA="11.3.1"
ARG UBUNTU="20.04"
ARG ARCH=""

FROM nvidia/cuda${ARCH}:${CUDA}-devel-ubuntu${UBUNTU}

ARG NVIDIA_DISTRO="ubuntu2004/x86_64"
ARG OPENCV="4.5.4"
ARG CUDA_ARCH_BIN="5.2 5.3 6.0 6.1 6.2 7.0 7.2 7.5 8.0 8.6"
ARG CUDA_ARCH_PTX="8.6"
ARG CUDNN="ON"

ENV DEBIAN_FRONTEND=noninteractive

# See https://developer.nvidia.com/blog/updating-the-cuda-linux-gpg-repository-key/
RUN apt-key del 7fa2af80
RUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/${NVIDIA_DISTRO}/3bf863cc.pub




RUN apt update && apt install -y --no-install-recommends \
    # Build tools for compiling C/C++ code
    build-essential pkg-config \
    cmake git gcc g++ ninja-build \
    # Debugger for debugging code
    gdb \
    # Utilities for downloading and extracting files
    wget unzip yasm \
    # Package manager for installing software without a package manager (e.g. Ubuntu's `dpkg`)
    checkinstall \
    ### OpenCV Dependencies ###
    # Development libraries for IEEE 1394 cameras (DC-1394)
    libdc1394-22 libdc1394-22-dev \
    # Linear algebra library optimized for performance
    libatlas-base-dev \
    # Fortran compiler (for numerical computations)
    gfortran \
    # Flann development libraries (for efficient nearest neighbor search)
    libflann-dev \
    # Thread building blocks library (for concurrent programming)
    libtbb2 \
    libtbb-dev \
    # JPEG image compression and decompression library
    libjpeg-dev \
    # PNG image compression and decompression library
    libpng-dev \
    # TIFF image compression and decompression library
    libtiff-dev \
    libtiff5-dev \
    # OpenGL Extension Wrangler (GLEW) development libraries
    libglew-dev \
    # Compression library (zlib)
    zlib1g-dev \
    # Geospatial data abstraction library (GDAL) development libraries
    libgdal-dev \
    # Flags and gflags development libraries (for command-line argument parsing)
    libgflags-dev \
    libgoogle-glog-dev \
    # Protocol Buffers compiler and development libraries
    libprotobuf-dev \
    protobuf-compiler \
    # Video encoding and decoding library
    ffmpeg \
    # AVFoundation development libraries for video encoding and decoding
    libavutil-dev \
    libavcodec-dev \
    libavformat-dev \
    libavutil-dev \
    libswscale-dev \
    libavresample-dev \
    # Leptonica image processing library development libraries
    libleptonica-dev \
    # Tesseract OCR engine development libraries
    libtesseract-dev \
    # GTK+ GUI toolkit development libraries (for GUI applications)
    libgtk-3-dev libgtk2.0-dev \
    # VTK (Visualization Toolkit) development libraries for 3D visualization
    libvtk6-dev \
    # Linear algebra library (LAPACK) development libraries
    liblapack-dev \
    # Development libraries for v4l (video4linux)
    libv4l-dev \
    doxygen \
    # Eigen
    libeigen3-dev \
    # Python
    python-dev \
    python-numpy \
    python3-dev \
    python3-numpy \
    # HDF5 serial library development libraries
    libhdf5-serial-dev
    
    WORKDIR /tmp
    RUN wget https://github.com/opencv/opencv/archive/refs/tags/${OPENCV}.zip && unzip ${OPENCV}.zip && rm ${OPENCV}.zip
    RUN wget https://github.com/opencv/opencv_contrib/archive/${OPENCV}.zip && unzip ${OPENCV}.zip && rm ${OPENCV}.zip
    RUN mkdir opencv-${OPENCV}/build && \
    cd opencv-${OPENCV}/build && \
    cmake -GNinja \
        -DOPENCV_EXTRA_MODULES_PATH=/tmp/opencv_contrib-${OPENCV}/modules \
        -DWITH_CUDA=ON \
        -DWITH_CUDNN=${CUDNN} \
        -DENABLE_FAST_MATH=ON \
        -DCUDA_FAST_MATH=ON \
        -DCUDA_ARCH_BIN=${CUDA_ARCH_BIN} \
        -DCUDA_ARCH_PTX=${CUDA_ARCH_PTX} \
        -DWITH_CUBLAS=ON \
        -DOPENCV_ENABLE_NONFREE=ON \
        -DWITH_GSTREAMER=OFF \
        -DCMAKE_BUILD_TYPE=RELEASE \
        -DCMAKE_INSTALL_PREFIX=/usr/local \
        -DBUILD_TESTS=OFF \
        -DBUILD_PERF_TESTS=OFF \
        -DBUILD_EXAMPLES=OFF \
        -DBUILD_opencv_apps=ON \
        .. && \
    ninja && \
    ninja install && \
    ldconfig

RUN rm -rf /tmp/* && rm -rf /var/lib/apt/lists/*

# Install Eigen
RUN apt-get update && \
    apt-get install -y --no-install-recommends libeigen3-dev